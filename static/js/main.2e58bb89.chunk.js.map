{"version":3,"sources":["helper/FetchData.js","components/Table.js","helper/PostData.js","logo/logo.png","helper/YupValidation.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["fetchData","path","a","axios","get","response","data","TableComp","useState","user","setUser","isAdded","useContext","UserContext","useEffect","then","reverse","catch","err","console","log","Table","striped","bordered","hover","className","map","i","firstName","lastName","phone","postData","post","addUser","Yup","min","max","required","FormComp","tableTriger","initialValues","validationSchema","onSubmit","values","resetForm","alert","handleSubmit","handleChange","handleBlur","touched","errors","isValid","Form","src","Logo","alt","Group","Label","Control","type","value","onChange","name","Feedback","Button","variant","createContext","App","setAdded","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e58bb89.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const fetchData = async (path) => {\n    const response = await axios.get(`${path}`)\n    return response?.data;\n}","import React, { useEffect, useState, useContext } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport \"./Table.style.css\";\nimport { fetchData } from \"../helper/FetchData\";\nimport { UserContext } from \"../App\";\n\nfunction TableComp() {\n  const [user, setUser] = useState([]);\n  const {isAdded} = useContext(UserContext);\n\n  useEffect(() => {\n    fetchData(\"https://mern-user-form.herokuapp.com/api/users\")\n      .then((response) => {\n        setUser(response.reverse());\n      })\n      .catch((err) => console.log(\"message\", err));\n  }, [isAdded]);\n\n  return (\n    <Table striped bordered hover className=\"table-wrapper\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      {user.map((data, i) => {\n        return (\n          <tbody key={i}>\n            <tr>\n              <td>{i + 1}</td>\n              <td>{data.firstName}</td>\n              <td>{data.lastName}</td>\n              <td>{data.phone}</td>\n            </tr>\n          </tbody>\n        );\n      })}\n    </Table>\n  );\n}\n\nexport default TableComp;\n","import axios from \"axios\";\n\nexport const postData = async (path, data) => {\n  const response = await axios.post(`${path}`, data, );\n  return response?.data;\n};\n","export default __webpack_public_path__ + \"static/media/logo.e831bfb8.png\";","import * as Yup from \"yup\";\n\n\nexport const addUser = Yup.object({\n    firstName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(20, \"Too Long!\")\n      .required(\"First name is a required\"),\n    lastName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(20, \"Too Long!\")\n      .required(\"Last name is a required\"),\n    phone: Yup.number()\n      .min(100000000, \"Min 10 chars\")\n      .required(\"Phone is a required\"),\n  });","import React, { useContext } from \"react\";\nimport { Formik } from \"formik\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { postData } from \"../helper/PostData\";\nimport \"./Form.style.css\";\nimport Logo from \"../logo/logo.png\";\nimport { UserContext } from \"../App\";\nimport { addUser } from \"../helper/YupValidation\";\n\nconst FormComp = () => {\n  const { tableTriger } = useContext(UserContext);\n\n  return (\n    <div className=\"form-wrapper\">\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          phone: \"\",\n        }}\n        validationSchema={addUser}\n        onSubmit={(values, { resetForm }) => {\n          postData(\"https://mern-user-form.herokuapp.com/api/users/addUser\", values)\n            .then(() => {\n              alert(\"Added user\");\n              tableTriger();\n            })\n            .catch((err) => {\n              alert(\"Error\");\n            });\n          resetForm({ values: \"\" });\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors,\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <img src={Logo} alt=\"logo\" className=\"image\" />\n            <Form.Group>\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={values.firstName}\n                onChange={handleChange}\n                name=\"firstName\"\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback type=\"valid\">\n                Looks Good\n              </Form.Control.Feedback>\n              <Form.Control.Feedback type=\"inValid\" className=\"invalid\">\n                {errors.firstName}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                name=\"lastName\"\n                type=\"text\"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n                required\n              />\n              <Form.Control.Feedback>Looks Good</Form.Control.Feedback>\n              <Form.Control.Feedback type=\"inValid\" className=\"invalid\">\n                {errors.lastName}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Phone</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={values.phone}\n                onChange={handleChange}\n                name=\"phone\"\n                isValid={touched.phone && !errors.phone}\n                required\n              />\n              <Form.Control.Feedback type=\"valid\">\n                Looks Good\n              </Form.Control.Feedback>\n              <Form.Control.Feedback type=\"inValid\" className=\"invalid\">\n                {errors.phone}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n              Add User\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormComp;\n","import React, { createContext, useState } from \"react\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\nexport const UserContext = createContext();\n\nconst App = () => {\n  const [isAdded, setAdded] = useState(true);\n  const tableTriger = () => {\n    setAdded(!isAdded);\n  };\n\n  return (\n    <UserContext.Provider value={{ isAdded, tableTriger }}>\n      <div className=\"body\">\n        <Form />\n        <Table />\n      </div>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}